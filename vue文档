在vue实例化对象中的data属性可以通过{{}}直接在dome中渲染出来
vue会在后台将数据和dom进行关联,完成数据的响应式,我们在控制台直接修改属性的值回车,会发现html页面中的值也随之改变,传统js操作是修改一个属性的值之后,通过获取元素,对元素添加innerhtml事件,innhtml中输入我们定义的属性从而实现js数据与dom的绑定

vue的条件语句v-if是通过属性值的true false状态来进行判断
我们不仅可以把数据绑定到 DOM 文本或特性，还可以绑定到 DOM 结构。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。

所谓过度效果就是弹出渐变 这类的动画

v-for 可以通过语句v-for="todo in todos" 实现todos数组/对象中的todu元素的遍历输出 有点像foreach

用户交互 使用v-on 指令可以添加事件监听 用法 v-on:click="fn",这个fn在vue实例下的methods中进行声明.对于vue中的事件交互 只需要将事件 通过v-on绑定到需要交互的dom元素上,然后再vue下的method中声明方法,不需要传统的在js中进行dom查找,和事件添加

双向绑定 非常重要非常重要 非常重要!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
v-model实现表单的双向数据绑定 通过v-model 表单输入的数据可以在js中被使用,同时从表单传入的数据还可以在html页面上展现出来,这种功能可以很轻松的实现ajax的异步查询,直接进行ajax操作即可,省略了许多dom操作代码如下

<div id="app-6">
  <p>{{ message }}</p>
  <input v-model="message">
</div>
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})
解读:data中定义的message属性的值会直接显示在html中的p标签里,在输入框中输入新的值时,通过 v-model="message"方法将data中的message值进行动态刷新,在返回呈现到p中,所有的dom操作都是通过vue来完成的,用户只需要关注数据与页面样式就可以了.有木有很爽

组件化应用构建
vue的组件化概念在于可以自定义小型独立的可复用的组件来构建大型应用,例如常用的layout中的header footer就是最基本的组件
vue的组件可以实现从父作用域将数据传到子组件当中,在子组件中调用父组件的数据实现

Vue.component('todo-item', {
  // todo-item 组件现在接受一个
  // "prop"，类似于一个自定义特性。
  // 这个 prop 名为 todo。
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})

这里可以发现vue的组件很像xhtml或html5中的自定义标签(元素) vue在架构的时候参考了这部分语法,
区别在于
1.Web 组件规范仍然处于草案阶段，并且未被所有浏览器原生实现。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。

2.Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。


注释:一个shim是一个库,它将一个新的API引入到一个旧的环境中,而且仅靠旧环境中已有的手段实现
一个polyfill就是一个用在浏览器API上的shim.我们通常的做法是先检查当前浏览器是否支持某个API,如果不支持的话就加载对应的polyfill.然后新旧浏览器就都可以使用这个API了.




vue安装
先安装调试工具 vue devtools
在安装vue环境 
可以直接使用<script>标签引入
可以使用cdn引入
npm引入 构建大型项目时使用npm安装 npm可以很好地配合webpack等模块打包器使用 同时可以开发单文件组件 .vue文件 文件中包含html js css代码 
可以使用命令行工具引入cli 实现了构建大型单页应用开箱即用的构建配置


vue实例
每一个vue应用都是通过Vue函数创建一个新的vue实例开始的:
vue vm = {
	//选项
}
 
创建vue